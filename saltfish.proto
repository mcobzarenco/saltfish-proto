package reinferio.saltfish;

import "reinferio/core.proto";


/*****************        DatasetStore::create_dataset        *****************/

message CreateDatasetRequest {
  optional reinferio.core.Dataset dataset = 1;
}

message CreateDatasetResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    DUPLICATE_FEATURE_NAME = 2;
    DUPLICATE_DATASET_NAME = 3;
    DATASET_ID_ALREADY_EXISTS = 4;
    INVALID_DATASET_ID = 5;
    INVALID_USER_ID = 6;
    INVALID_FEATURE_TYPE = 7;
    NETWORK_ERROR = 8;
  }
  optional Status status = 1;
  optional string msg = 2;

  optional bytes dataset_id = 3;
}

/*****************        DatasetStore::delete_dataset        *****************/

message DeleteDatasetRequest {
  optional bytes dataset_id = 1;
}

message DeleteDatasetResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    INVALID_DATASET_ID = 2;
    NETWORK_ERROR = 3;
  }
  optional Status status = 1;
  optional string msg = 2;
  optional bool updated = 3;
}

/*****************      DatasetStore::generate_id     *****************/

message GenerateIdRequest {
  enum IdType {
    INVALID = 0;
    DATASET = 1;
    ROW = 2;
  }
  optional IdType id_type = 1;
  optional uint32 count = 2;
}

message GenerateIdResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    COUNT_TOO_LARGE = 2;
  }
  optional Status status = 1;
  optional string msg = 2;
  repeated bytes ids = 3;
}

/*****************         DatasetStore::get_datasets         *****************/

message DatasetDetail {
  optional reinferio.core.Dataset dataset = 1;
  optional string username = 2;
  optional string email = 3;
}

message GetDatasetsRequest {
  optional bytes dataset_id = 1;
  optional int32 user_id = 2;
  optional string username = 3;
}

message GetDatasetsResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    INVALID_DATASET_ID = 2;
    INVALID_USER_ID = 3;
    INVALID_USERNAME = 4;
    INVALID_REQUEST = 5;
    NETWORK_ERROR = 6;
  }
  optional Status status = 1;
  optional string msg = 2;

  repeated DatasetDetail datasets = 3;
}

/*****************          DatasetStore::put_records         *****************/

message PutRecordsRequest {
  message TaggedRecord {
    optional bytes record_id = 1;
    optional reinferio.core.Record record = 2;
  }
  optional bytes dataset_id = 1;
  repeated TaggedRecord records = 2;
}

message PutRecordsResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    INVALID_SCHEMA = 2;
    INVALID_DATASET_ID = 3;
    NO_RECORDS_IN_REQUEST = 4;
    INVALID_RECORD = 5;
    NETWORK_ERROR = 6;
  }
  optional Status status = 1;
  optional string msg = 2;

  repeated bytes record_ids = 3;
}

/*****************                DatasetStore                *****************/

enum RequestType {
    UNKNOWN_REQUEST = 0;
    ALL = 1;
    CREATE_DATASET = 2;
    DELETE_DATASET = 3;
    GENERATE_ID = 4;
    PUT_RECORDS = 5;
}

service DatasetStore  {
  rpc create_dataset(CreateDatasetRequest) returns (CreateDatasetResponse);
  rpc delete_dataset(DeleteDatasetRequest) returns (DeleteDatasetResponse);
  rpc generate_id(GenerateIdRequest) returns (GenerateIdResponse);
  rpc get_datasets(GetDatasetsRequest) returns (GetDatasetsResponse);
  rpc put_records(PutRecordsRequest) returns (PutRecordsResponse);
}
