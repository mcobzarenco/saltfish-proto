package reinferio.saltfish;

import "reinferio/core.proto";


/*****************     SourceManagerService::create_source    *****************/

message CreateSourceRequest {
  optional reinferio.core.Source source = 1;
}

message CreateSourceResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    DUPLICATE_FEATURE_NAME = 2;
    DUPLICATE_SOURCE_NAME = 3;
    SOURCE_ID_ALREADY_EXISTS = 4;
    INVALID_SOURCE_ID = 5;
    INVALID_USER_ID = 6;
    INVALID_FEATURE_TYPE = 7;
    NETWORK_ERROR = 8;
  }
  optional Status status = 1;
  optional string msg = 2;

  optional bytes source_id = 3;
}

/*****************     SourceManagerService::delete_source    *****************/

message DeleteSourceRequest {
  optional bytes source_id = 1;
}

message DeleteSourceResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    INVALID_SOURCE_ID = 2;
    NETWORK_ERROR = 3;
  }
  optional Status status = 1;
  optional string msg = 2;
  optional bool updated = 3;
}

/*****************      SourceManagerService::generate_id     *****************/

message GenerateIdRequest {
  enum IdType {
    INVALID = 0;
    SOURCE = 1;
    ROW = 2;
  }
  optional IdType id_type = 1;
  optional uint32 count = 2;
}

message GenerateIdResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    COUNT_TOO_LARGE = 2;
  }
  optional Status status = 1;
  optional string msg = 2;
  repeated bytes ids = 3;
}

/*****************      SourceManagerService::get_sources     *****************/

message SourceInfo {
  optional reinferio.core.Source source = 1;
  optional string username = 2;
  optional string email = 3;
}

message GetSourcesRequest {
  optional bytes source_id = 1;
  optional int32 user_id = 2;
  optional string username = 3;
}

message GetSourcesResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    INVALID_SOURCE_ID = 2;
    INVALID_USER_ID = 3;
    INVALID_USERNAME = 4;
    INVALID_REQUEST = 5;
    NETWORK_ERROR = 6;
  }
  optional Status status = 1;
  optional string msg = 2;

  repeated SourceInfo sources_info = 3;
}

/*****************      SourceManagerService::put_records     *****************/

message PutRecordsRequest {
  message TaggedRecord {
    optional bytes record_id = 1;
    optional reinferio.core.Record record = 2;
  }
  optional bytes source_id = 1;
  repeated TaggedRecord records = 2;
}

message PutRecordsResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    INVALID_SCHEMA = 2;
    INVALID_SOURCE_ID = 3;
    NO_RECORDS_IN_REQUEST = 4;
    INVALID_RECORD = 5;
    NETWORK_ERROR = 6;
  }
  optional Status status = 1;
  optional string msg = 2;

  repeated bytes record_ids = 3;
}

/*****************            SourceManagerService            *****************/

enum RequestType {
    UNKNOWN_REQUEST = 0;
    ALL = 1;
    CREATE_SOURCE = 2;
    DELETE_SOURCE = 3;
    GENERATE_ID = 4;
    PUT_RECORDS = 5;
}

service SourceManagerService  {
  rpc create_source(CreateSourceRequest) returns (CreateSourceResponse);
  rpc delete_source(DeleteSourceRequest) returns (DeleteSourceResponse);
  rpc generate_id(GenerateIdRequest) returns (GenerateIdResponse);
  rpc get_sources(GetSourcesRequest) returns (GetSourcesResponse);
  rpc put_records(PutRecordsRequest) returns (PutRecordsResponse);
}
